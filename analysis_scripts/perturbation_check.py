#perturbation_check.py
"""
Samuel Ward
15/08/2019
----
see what the perturbations generated by MARS-F look like
---
usage:
 
notes:         
    sums over harmonics and plots the total field
    reads straight from MARS-F output, allows arbitrary combinations

    currently ~working for same direction: -ve mode number, i3dr=1, positive phases, phi_0=0 (could try with -10 degrees offset added to phases)
    currently ~working for opposite direction: -ve mode number, i3dr=1, negative phases, phi_0=0 (tonic has forwards_or_backwards=-1)
    currently working but need phase shift (for opposite direction): -ve mode number, i3dr=-1, +ve phases (tonic has forwards_or_backwards=-1)
    currently working but need phase shift (for opposite direction): +ve mode number, i3dr=+1, +ve phases (tonic has forwards_or_backwards=-1)


bkg=read_magn_bkg('bfield_inputs/mars_prn6_40_deg.magn_bkg')
plot(squeeze(bkg.BR(70,66,:)))


bkg=read_magn_bkg('old_data/mars_prn26_40.magn_bkg')


bkg.Bz(128,75,1)

RZ in matlab notation: real RZ location [m]
45:80 = 1.5962:-0.0808
72:124 = 2.1154:0.7096
75:128 = 2.1731:0.7814
78:124 = 2.2308:0.7096
62:126 = 1.9231:0.7455


phase is applied to upper coilset (+ve phase)

---
"""

import context
from classes.input_classes.perturbation import Perturbation
from classes.input_classes.equilibrium import Equilibrium
import pathlib
import support
import constants
import numpy as np
import matplotlib.pyplot as plt
import copy

eq=Equilibrium(ID='Antti Snicker ITPA GEQDSK equilibrium',data_format='GEQDSK',filename=pathlib.Path('ASCOT')/'asnicker_data'/'g033143.02730')

n2=True
n6=True

filepaths=[]
harmonics=[]
mode_numbers=[]
forwards_or_backwards=[] #does mode rotate in the opposite direction?
phases=np.array([160.0]) #in degrees
phases*=2.*np.pi/360 #in radians
number_points_toroidal=100

response=False #do files include plasma response?
response_tag = 'resp' if response else 'vacuum'  
ideal=False #are files ideal or resistive?
ideal_tag = 'ideal' if ideal else 'resist' 
i3dr=-1
phi_0=-(67.5*2.*constants.pi/360.)



dB_R=np.zeros(number_points_toroidal)
dB_tor=np.zeros(number_points_toroidal)
dB_Z=np.zeros(number_points_toroidal)

#R=2.1154 #evaluate and plot the field at this point in the poloidal plane
#Z=0.7096 #72:124

R=2.1731 
Z=0.7814 #75:128

#R=2.2308 #78:124
#Z=0.7096

#R=1.9231 #62:126
#Z=0.7455

#R=2.0769 #70:70
#Z=-0.2605

#R=2.0 #66:70
#Z=-0.2605

R=np.full(number_points_toroidal,R) #these are the points to evaluate the field at when we take a single point and expand toroidally
Z=np.full(number_points_toroidal,Z)
phi=np.linspace(0.,2.*constants.pi,number_points_toroidal)

#looking at modes in a loop
if n2:
    filepaths.append(pathlib.Path('ASCOT')/'dryan_data'/'33143_2730_mars_data')
    mode_numbers.append(-2)
    forwards_or_backwards.append(-1.)
if n6:
    filepaths.append(pathlib.Path('ASCOT')/'dryan_data'/'33143_2730_n_6')
    mode_numbers.append(-6)
    forwards_or_backwards.append(1.) 

for phase in phases: #for each mode_number vary the phase between the upper and lower coils    

    for filepath,mode_number,forwards_or_backward in zip(filepaths,mode_numbers,forwards_or_backwards): #cycle through mode_numbers
        #print(forwards_or_backward)
        #exit()
        #read the perturbation
        perturbation=Perturbation(ID='mode_number - {mode_number}, phase - {phase}'.format(mode_number=mode_number,phase=phase),data_format='MARSF_bplas',filename=filepath,phase=forwards_or_backward*phase,ideal=ideal,response=response,mode_number=mode_number,bcentr=1.75660107,rmaxis=1.70210874)
        #perturbation.plot_components(R=R[0],Z=Z[0],phi=0)
        #exit()
        _dB_R,_dB_tor,_dB_Z=perturbation.evaluate(R=R,Z=Z,phi=phi,phase=0,i3dr=i3dr,mode_number=mode_number) #evaluate toroidally
        dB_R+=_dB_R
        dB_tor+=_dB_tor
        dB_Z+=_dB_Z
    plt.plot(phi+phi_0,dB_R,'k-')
    plt.title(str(phase))
    plt.show()
    plt.plot(phi+phi_0,dB_tor,'b-')
    plt.title(str(phase))
    plt.show()
    plt.plot(phi+phi_0,dB_Z,'r-')
    plt.title(str(phase))
    plt.show()
    print(dB_R[0])
    print(dB_tor[0])
    print(dB_Z[0])

'''
#looking at modes separately

phi=0.0
perturbation2=Perturbation(ID='n2, phase - {phase}'.format(phase=phase),data_format='MARSF_bplas',filename=pathlib.Path('ASCOT')/'dryan_data'/'33143_2730_mars_data',phase=phase,ideal=ideal,response=response,mode_number=2,bcentr=1.75660107,rmaxis=1.70210874)
perturbation6=Perturbation(ID='n6, phase - {phase}'.format(phase=phase),data_format='MARSF_bplas',filename=pathlib.Path('ASCOT')/'dryan_data'/'33143_2730_n_6',phase=phase,ideal=ideal,response=response,mode_number=6,bcentr=1.75660107,rmaxis=1.70210874)

cp = np.cos(2*phi*i3dr)
sp = np.sin(2*phi*i3dr)
dB_R=(perturbation2['dB_field_R_real']*cp - perturbation2['dB_field_R_imag']*sp)
dB_tor=((perturbation2['dB_field_tor_real']*cp - perturbation2['dB_field_tor_imag']*sp)*i3dr)
dB_Z=(perturbation2['dB_field_Z_real']*cp - perturbation2['dB_field_Z_imag']*sp)

cp = np.cos(6*phi*i3dr)
sp = np.sin(6*phi*i3dr)
dB_R+=(perturbation6['dB_field_R_real']*cp - perturbation6['dB_field_R_imag']*sp)
dB_tor+=((perturbation6['dB_field_tor_real']*cp - perturbation6['dB_field_tor_imag']*sp)*i3dr)
dB_Z+=(perturbation6['dB_field_Z_real']*cp - perturbation6['dB_field_Z_imag']*sp)

print(dB_R[75,128])
print(dB_tor[75,128])
print(dB_Z[75,128])
print(perturbation2['R_1D'][128])
print(perturbation2['Z_1D'][75])

print(perturbation2['R_1D'])
print(perturbation2['Z_1D'])
'''